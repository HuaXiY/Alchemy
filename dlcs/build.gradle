import org.gradle.plugins.ide.idea.model.IdeaModel

buildscript {
    repositories {
        flatDir { dirs '../deps' }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-Alchemy'
    }
}

plugins {
    id "com.dorongold.task-tree" version "1.3"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    sourceCompatibility = '10'
    targetCompatibility = '10'
    version = "${config.minecraft_version}-${config.mod_version}.${config["dlc_${project.name}_dev_version"]}"

    def ideaConv = (IdeaModel) project.getExtensions().getByName("idea")
    ideaConv.module.setOutputDir(file(project.rootDir.canonicalPath + "/dlcs_out/${name}"))

    dependencies {
        compileOnly project(path: ':core')
        try {
            compileOnly files(project(":core").configurations.forgeGradleMc.resolve())
            compileOnly files(project(":core").configurations.forgeGradleMcDeps.resolve())
            compileOnly files(project(":core").configurations.forgeGradleMcDepsClient.resolve())
        } catch(Ignored) { }
    }

    archivesBaseName = "Alchemy-${config.show_version}"
    task sourcesZip(type: Zip, dependsOn: ':core:sourcesZip') {
        baseName = "${archivesBaseName}-dlc-${project.name}"
        from fileTree(dir: 'src/main/java/')
        include '**/'
        classifier = 'sources'
        from 'LICENSE'
        destinationDir jar.destinationDir
    }

    jar {
        baseName = "${archivesBaseName}-dlc-${project.name}"

        println("dlc_${project.name}_dev_version")
        //from "build/classes/${project.name}"
        //from "dlcs/${name}/src/main/resources"
        from 'dlcs/README.txt'

        destinationDir = project.parent.tasks.jar.destinationDir
        classifier = 'deobf'
    }

    task reobf(dependsOn: jar) << {
        def inputName = jar.archiveName
        project.parent.reobfDLC(inputName, compileJava.classpath)
    }
    jar.finalizedBy reobf

    compileJava {
        sourceCompatibility = '10'
        targetCompatibility = '10'
        options.encoding = 'utf-8'
        options.fork = true
        def jdt = configurations.ecj.asPath
        doFirst {
            options.forkOptions.with {
                executable = 'java'
                println "DLC-${name} Compile List: "
                source.each { println it }
                jvmArgs = [ '-cp', jdt, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn' ]
            }
        }
    }

    task rename << {
        fileList('build/libs').each { File f ->
            def name = f.name
            if (name.contains('-dlc') && name.contains('-universal'))
                f.renameTo(file(f.parent + '/' + name.replace('.jar', '.dlc')))
        }
    }

    build.finalizedBy rename
}

void reobfDLC(String inputName, FileCollection classpath) {
    def outputName = inputName.replace('deobf', 'universal')
    def mapping = new net.md_5.specialsource.JarMapping()
    def inputFile = file("build/libs/${inputName}")
    def outputFile = file("build/libs/${outputName}")
    def remapper = new net.md_5.specialsource.JarRemapper(null, mapping)
    def inputJar = net.md_5.specialsource.Jar.init(inputFile)
    def inheritanceProviders = new net.md_5.specialsource.provider.JointProvider()
    inheritanceProviders.add(getProvider(inputFile, classpath))
    mapping.loadMappings(config.mcp_srg)
    mapping.setFallbackInheritanceProvider(inheritanceProviders)
    remapper.remapJar(inputJar, outputFile)
}

net.md_5.specialsource.provider.ClassLoaderProvider getProvider(File input, FileCollection classpath) {
    def set = new HashSet()
    set.addAll(classpath.getFiles())
    set.addAll(Arrays.asList(project.rootProject.fileList("build/libs/")))
    def urls = set.stream().filter { it.getName().endsWith(".jar") && !it.getName().contains("-sources") && (it.getName().contains("-deobf") ||
            it.getName().contains("forgeSrc-") || it.getName().contains("${archivesBaseName}-core") || it.getName().contains("BiomesOPlenty-")) ||
            it.getName().contains("ToughAsNails-") || it.getName().contains("mobends-") }
    .map { it.toURI() }.map { it.toURL() }.toArray { new URL[it] }
    println "ReobfDLC class path: "
    urls.each { println it }
    def classLoader = new java.net.URLClassLoader(urls)
    return new net.md_5.specialsource.provider.ClassLoaderProvider(classLoader)
}
