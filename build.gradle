
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'java'

compileJava.options.encoding = 'UTF-8'

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/

ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group= "com.github.mickeyxiami.alchemy" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Alchemy-${config.show_version}"

version = "${config.minecraft_version}-${config.mod_version}.${config.dev_version}"
config.build_number = config.dev_version

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.config.mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    def buildnum = (config.build_number != "") ? config.build_number : "?"
    replace '@MOD_VERSION@', config.mod_version + '.' + buildnum
    replace '@DEV_VERSION@', buildnum
    replaceIn 'AlchemyConstants.java'
    
}

task sourcesJar(type: Jar) {
    from 'src/main/java/'
    classifier = 'sources'
    
    from 'LICENSE.txt'
}

task dlc {
    dirList('dlcs').each { File f ->
        def name = f.name
        println "Found DLC -> ${name}"
        
        task "sourcesDLC-${name}"(type: Jar, dependsOn: sourcesJar) {
            baseName = "${archivesBaseName}-dlc-${name}"
            version = "${config.minecraft_version}-${config.mod_version}.${config["dlc_${name}_dev_version"]}"
            from "dlcs/${name}/src/main/java"
            from 'dlcs/LICENSE.txt'
            classifier = 'sources'
        }
        artifacts.add('archives', tasks["sourcesDLC-${name}"])
        
        task "compileDLC-${name}"(type: JavaCompile) {
            source = fileTree(dir: "dlcs/${name}/src/main/java", include: '**/*.java')
            destinationDir = file("build/classes/${name}")
            sourceCompatibility = '1.6'
            targetCompatibility = '1.6'
            dependencyCacheDir = file("build/classes/${name}")
            classpath = tasks['compileJava'].classpath + files('build/classes/main')
        }
        
        task "jarDLC-${name}"(type: Jar, dependsOn: "compileDLC-${name}") {
            baseName = "${archivesBaseName}-dlc-${name}"
            version = "${config.minecraft_version}-${config.mod_version}.${config["dlc_${name}_dev_version"]}"
            from "build/classes/${name}"
            from "dlcs/${name}/src/main/resources"
            from 'dlcs/README.txt'
            classifier = 'deobf'
        }
        artifacts.add('archives', tasks["jarDLC-${name}"])
        
        task "reobfDLC-${name}"(dependsOn: "jarDLC-${name}") << {
            def inputName = "${archivesBaseName}-dlc-${name}-${config.minecraft_version}-${config.mod_version}.${config["dlc_${name}_dev_version"]}-deobf.jar"
            reobfDLC(inputName)
		}
		tasks["jarDLC-${name}"].finalizedBy tasks["reobfDLC-${name}"]
    }
}

void reobfDLC(String inputName) {
	def mcpVersion = project.config.mappings_version.substring('snapshot_'.length())
	def outputName = inputName.replace('deobf', 'universal')
	def mapping = new net.md_5.specialsource.JarMapping()
	def srgFile = file(System.getProperty('user.home') + "/.gradle/caches/minecraft/de/oceanlabs/mcp/mcp_snapshot/${mcpVersion}/srgs/mcp-srg.srg")
	def inputFile = file("build/libs/${inputName}")
	def outputFile = file("build/libs/${outputName}")
	def remapper = new net.md_5.specialsource.JarRemapper(null, mapping)
	def inputJar = net.md_5.specialsource.Jar.init(inputFile)
	def inheritanceProviders = new net.md_5.specialsource.provider.JointProvider()
	def jarProvider = new net.md_5.specialsource.provider.JarProvider(inputJar)
	inheritanceProviders.add(jarProvider)
	mapping.loadMappings(srgFile)
	mapping.setFallbackInheritanceProvider(inheritanceProviders)
   	remapper.remapJar(inputJar, outputFile)
}

void reobfCSL(String inputName) {
	def mcpVersion = project.config.mappings_version.substring('snapshot_'.length()) // custom
	def outputName = inputName.replace('.jar', '-deobf.jar')
	def mapping = new net.md_5.specialsource.JarMapping()
	def srgFile = file(System.getProperty('user.home') + "/.gradle/caches/minecraft/de/oceanlabs/mcp/mcp_snapshot/${mcpVersion}/srgs/notch-mcp.srg")
	def inputFile = file("${inputName}")
	def outputFile = file("${outputName}")
	def remapper = new net.md_5.specialsource.JarRemapper(null, mapping)
	def inputJar = net.md_5.specialsource.Jar.init(inputFile)
	def inheritanceProviders = new net.md_5.specialsource.provider.JointProvider()
	def jarProvider = new net.md_5.specialsource.provider.JarProvider(inputJar)
	inheritanceProviders.add(jarProvider)
	mapping.loadMappings(srgFile)
	mapping.setFallbackInheritanceProvider(inheritanceProviders)
   	remapper.remapJar(inputJar, outputFile)
	
	inputJar.jarFiles.each {
		it.close()
	}
	inputJar.jarForResource.each {
		it.value.close()
	}
	
	def zis = new java.util.zip.ZipInputStream(new java.io.FileInputStream("${outputName}"))
	def zos = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream("${outputName}".replace(".jar", "-fixed.jar")))
	for (java.util.zip.ZipEntry entry; (entry = zis.nextEntry) != null;) {
		if (entry.name.startsWith("net/minecraft")) {
			println entry.name.replace('/', '.')
			entry = new java.util.zip.ZipEntry(entry.name.replace('/', '.'))
		}
		zos.putNextEntry(entry)
		org.apache.commons.io.IOUtils.copy(zis, zos)
	}
	zis.close()
	zos.finish()
	inputFile.delete()
	outputFile.delete()
}

task csl << {
	reobfCSL('mods/CustomSkinLoader_1.10-14.3.jar');
}

File[] fileList(String dir) {
    file(dir).listFiles({ file -> file.isFile() && !file.getName().equals('bin') } as FileFilter).sort()
}

File[] dirList(String dir) {
    file(dir).listFiles({ file -> file.isDirectory() && !file.getName().equals('bin') } as FileFilter).sort()
}

task rename << {
	fileList('build/libs').each { File f ->
	    def name = f.name
		if (name.contains('-dlc') && name.contains('-universal'))
		    f.renameTo(file(f.parent + '/' + name.replace('.jar', '.dlc')))
		else if (name.contains('-sources'))
		    f.renameTo(file(f.parent + '/' + name.replace('.jar', '.zip')))
	}
}

build.finalizedBy rename

def commonManifest = {
    attributes 'FMLAT' : 'alchemy_at.cfg'
}

jar {
    manifest commonManifest
    classifier = 'universal'
	
	from 'README.txt'
}

artifacts {
    archives sourcesJar
}

dependencies {
    compile fileTree(dir: 'mods', include: ['*.jar'])
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
