
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'java'

apply from: 'ast.gradle'

configurations {
    ecj
}
dependencies {
    ecj 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
	compile fileTree(dir: 'mods', include: ['*.jar'])
}

def jdt = configurations.ecj.asPath

ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group= "com.github.mickeyxiami.alchemy" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Alchemy-${config.show_version}"

version = "${config.minecraft_version}-${config.mod_version}.${config.dev_version}"
config.build_number = config.dev_version

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.config.mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    def buildnum = (config.build_number != "") ? config.build_number : "?"
    replace '@MOD_VERSION@', config.mod_version + '.' + buildnum
    replace '@DEV_VERSION@', buildnum
    replaceIn 'AlchemyConstants.java'
    
}

recompileMc {
	doFirst {
		def at = file("src/main/resources/META-INF/forge.at")
		def lines = com.google.common.base.Joiner.on('\n').join(org.apache.commons.io.IOUtils.readLines(new FileInputStream(at)))
		def mapping = VERConsts['getMapping'](lines)
		mapping.values().forEach { it.forEach { println it } }
		def input = getInSources()
		def zis = new java.util.zip.ZipInputStream(new java.io.FileInputStream("${input.path}"))
		def zos = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream("${input.path}".replace(".jar", "-fixed.jar")))
		def result = new java.util.LinkedList()
		for (java.util.zip.ZipEntry entry; (entry = zis.nextEntry) != null;) {
			zos.putNextEntry(entry)
			if (entry.name.endsWith(".java")) {
				def name = entry.name.replace('/', '.').replace(".java", "")
				org.apache.commons.io.IOUtils.write(VERConsts['doAccessTransformer'](
						com.google.common.base.Joiner.on('\n').join(org.apache.commons.io.IOUtils.readLines(zis)), name, mapping, result),
						zos, "utf-8")
			} else {
				org.apache.commons.io.IOUtils.copy(zis, zos)
			}
		}
		zis.close()
		zos.finish()
		zos.close()
		def flag
		mapping.values().forEach { it.stream().filter { !result.contains(it) && !it.runtime }.forEach { flag = true; println it } }
		if (flag)
			throw new RuntimeException("At is not working properly")
		input.delete()
		file(input.path.replace(".jar", "-fixed.jar")).renameTo(input)
	}
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    
    options.encoding = 'utf-8'
    options.fork = true
    doFirst {
        options.forkOptions.with {
            executable = 'java'
            def lib = new java.util.TreeSet(sourceSets.main.compileClasspath.getFiles())
            sourceSets.main.compileClasspath = new org.gradle.api.internal.file.UnionFileCollection(lib)
            def toSort = { it.toString().contains("forgeSrc-") ? -1 : 0 }
            lib.sort { a, b -> toSort(a) - toSort(b) }
            println "Main Compile Class Path: "
            sourceSets.main.compileClasspath.each { println it }
            source = sourceSets.main.java.exclude { checkPackageName(it.getFile().toString().replace("\\", ".").replace("/", ".")) }
            println "Main Compile Path: "
            source.each { println it }
            println "JDT-ECJ lib path: " + jdt
            jvmArgs = [ '-cp', jdt, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn' ]
        }
    }
}

boolean checkPackageName(String packageName) {
    return packageName.contains("index.alchemy.core.run") || packageName.contains("index.alchemy.ztest") || packageName.contains("index.alchemy.development")
}

task sourcesJar(type: Jar) {
    from 'src/main/java/'
    classifier = 'sources'
    
    from 'LICENSE.txt'
}

task dlc {
    dirList('dlcs').each { File dlc ->
        def name = dlc.name
        println "Found DLC -> ${name}"
        
        task "sourcesDLC-${name}"(type: Jar, dependsOn: sourcesJar) {
            baseName = "${archivesBaseName}-dlc-${name}"
            version = "${config.minecraft_version}-${config.mod_version}.${config["dlc_${name}_dev_version"]}"
            from "dlcs/${name}/src/main/java"
            from 'dlcs/LICENSE.txt'
            classifier = 'sources'
        }
        artifacts.add('archives', tasks["sourcesDLC-${name}"])
        
        task "compileDLC-${name}"(type: JavaCompile) {
            source = fileTree(dir: "dlcs/${name}/src/main/java", include: '**/*.java')
            destinationDir = file("build/classes/${name}")
            sourceCompatibility = '1.8'
            targetCompatibility = '1.8'
            dependencyCacheDir = file("build/classes/${name}")
            classpath = tasks['compileJava'].classpath + files('build/classes/main')
            
            options.encoding = 'utf-8'
            options.fork = true
            doFirst {
                options.forkOptions.with {
                    executable = 'java'
                    def lib = new java.util.TreeSet(classpath.getFiles())
                    classpath = new org.gradle.api.internal.file.UnionFileCollection(lib)
                    def toSort = { it.toString().contains("forgeSrc-") ? -1 : 0 }
                    lib.sort { a, b -> toSort(a) - toSort(b) }
                    println "DLC-${name} Compile List: "
                    source.each { println it }
                    jvmArgs = [ '-cp', jdt, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn' ]
                }
             }
        }
        
        task "jarDLC-${name}"(type: Jar, dependsOn: "compileDLC-${name}") {
            baseName = "${archivesBaseName}-dlc-${name}"
            version = "${config.minecraft_version}-${config.mod_version}.${config["dlc_${name}_dev_version"]}"
            from "build/classes/${name}"
            from "dlcs/${name}/src/main/resources"
            from 'dlcs/README.txt'
            classifier = 'deobf'
        }
        artifacts.add('archives', tasks["jarDLC-${name}"])
        
        task "reobfDLC-${name}"(dependsOn: "jarDLC-${name}") << {
            def inputName = "${archivesBaseName}-dlc-${name}-${config.minecraft_version}-${config.mod_version}.${config["dlc_${name}_dev_version"]}-deobf.jar"
            reobfDLC(inputName, tasks["compileDLC-${name}"].classpath)
        }
        tasks["jarDLC-${name}"].finalizedBy tasks["reobfDLC-${name}"]
    }
}

void reobfDLC(String inputName, org.gradle.api.internal.file.UnionFileCollection classpath) {
    def mcpVersion = project.config.mappings_version.substring('snapshot_'.length())
    def outputName = inputName.replace('deobf', 'universal')
    def mapping = new net.md_5.specialsource.JarMapping()
    def srgFile = file(System.getProperty('user.home') +
        "/.gradle/caches/minecraft/de/oceanlabs/mcp/mcp_snapshot/${mcpVersion}/${config.minecraft_version}/srgs/mcp-srg.srg")
    def inputFile = file("build/libs/${inputName}")
    def outputFile = file("build/libs/${outputName}")
    def remapper = new net.md_5.specialsource.JarRemapper(null, mapping)
    def inputJar = net.md_5.specialsource.Jar.init(inputFile)
    def inheritanceProviders = new net.md_5.specialsource.provider.JointProvider()
    inheritanceProviders.add(getProvider(inputFile, classpath))
    mapping.loadMappings(srgFile)
    mapping.setFallbackInheritanceProvider(inheritanceProviders)
    remapper.remapJar(inputJar, outputFile)
}

void deobf(String inputName) {
    def mcpVersion = project.config.mappings_version.substring('snapshot_'.length())
    def outputName = inputName.replace('dev', 'deobf')
    def mapping = new net.md_5.specialsource.JarMapping()
    def srgFile = file(System.getProperty('user.home') +
        "/.gradle/caches/minecraft/de/oceanlabs/mcp/mcp_snapshot/${mcpVersion}/${config.minecraft_version}/srgs/srg-mcp.srg")
    def inputFile = file("deobf/${inputName}")
    def outputFile = file("deobf/${outputName}")
    def remapper = new net.md_5.specialsource.JarRemapper(null, mapping)
    def inputJar = net.md_5.specialsource.Jar.init(inputFile)
    def inheritanceProviders = new net.md_5.specialsource.provider.JointProvider()
    def jarProvider = new net.md_5.specialsource.provider.JarProvider(inputJar)
    inheritanceProviders.add(jarProvider)
    mapping.loadMappings(srgFile)
    mapping.setFallbackInheritanceProvider(inheritanceProviders)
    remapper.remapJar(inputJar, outputFile)
}

net.md_5.specialsource.provider.ClassLoaderProvider getProvider(File input, org.gradle.api.internal.file.UnionFileCollection classpath) {
    def set = classpath.getFiles()
    set.addAll(Arrays.asList(fileList("build/libs/")))
    def urls = set.stream().filter { it.getName().endsWith(".jar") && it.getName().contains("-universal") }.map { it.toURI() }.map { it.toURL() }.toArray { new URL[it] }
    def classLoader = new java.net.URLClassLoader(urls)
    return new net.md_5.specialsource.provider.ClassLoaderProvider(classLoader)
}

task deobf << {
    fileList('deobf').each { deobf(it.name) }
}

File[] fileList(String dir) {
    file(dir).listFiles({ file -> file.isFile() && !file.getName().equals('bin') } as FileFilter).sort()
}

File[] dirList(String dir) {
    file(dir).listFiles({ file -> file.isDirectory() && !file.getName().equals('bin') } as FileFilter).sort()
}

task rename << {
    fileList('build/libs').each { File f ->
        def name = f.name
        if (name.contains('-dlc') && name.contains('-universal'))
            f.renameTo(file(f.parent + '/' + name.replace('.jar', '.dlc')))
        else if (name.contains('-sources'))
            f.renameTo(file(f.parent + '/' + name.replace('.jar', '.zip')))
    }
}

build.finalizedBy rename

def commonManifest = {
    attributes 'FMLAT' : 'alchemy_at.cfg',
               'FMLCorePlugin': 'index.alchemy.core.AlchemyCorePlugin', 
               'FMLCorePluginContainsFMLMod': 'true'
}

jar {
    manifest commonManifest
    classifier = 'universal'
    
    from 'README.txt'
}

artifacts {
    archives sourcesJar
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
